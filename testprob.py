import numpy as np
class SolveLinearEquationsPCG:
    def __init__(self, data, col, ptr, coorden, b, num_iter, tol):
        self.data = data
        print("len data:",len(self.data))
        self.col = col
        print("len col:",len(self.col))
        self.ptr = ptr
        print("len ptr:",len(self.ptr))
        self.coords = coorden
        print("len coords:",len(self.coords))
        self.b = b
        print("len b:",len(self.b))
        self.num_iter = num_iter
        self.tol = tol

    def pcg(self,solini):
        print("ITERATIVE CONJUGATE GRADIENT METHOD")
        
        # x = np.zeros(len(self.b))
        x=solini
        r = self.b - self.dot(x)
        # print(np.sum(r)==np.sum(x))
        p = r
        resk = r
        norm_r = [np.linalg.norm(r)]

        for i in range(self.num_iter):
            print("iteracion",i)
            Ap = self.dot(p)
            alpha = np.dot(r.T, r) / np.dot(p.T,self.dot(p))
            print("norma residual ",np.linalg.norm(r))

            x += alpha * p
            r = resk - (alpha * self.dot(p))
            beta= np.dot(r.T, r) / np.dot(resk.T, resk)
            p = r + (beta * p)
            resk = r.copy()
            norm_r.append(np.linalg.norm(r))

        return x, norm_r

    def jacobi(self, omega, u, res):
        # print("HOLA")
        D = self.get_diag_matrix()
        resnorm = np.linalg.norm(res)
        resloc = res.copy()
        delu = np.zeros(len(u))
        delu =  omega *np.divide(resloc, D)
        resloc -= self.dot(delu)
        
        return u+delu, resloc

    def iterate_jacobi(self, solini):
        print("ITERATIVE JACOBI METHOD")
        sol = np.array(solini, dtype='float64')
        res = self.b - self.dot(sol)
        resnorm = [np.linalg.norm(res)]

        for i in range(self.num_iter):
            sol, res = self.jacobi(1.0, sol, res)
            resnorm.append(np.linalg.norm(res))
            # if resnorm[-1] >= resnorm[-2]:  # Changed > to >= for stability
            #     break

        return sol, resnorm

    

    def gauss_seidel(self, omega,u, res):
        n = len(res)
        delu = np.zeros(n)
        resc = res.copy()
        delu[0] = omega * res[0] / self.Aij(0, 0)

        for i in range(1, n):
            lower_sum = self.InnerProductLowerRows(delu, i)
            resc[i] -= lower_sum
            delu[i] += omega * resc[i] / self.Aij(i, i)

        resc = res - self.dot(delu)
        return u + delu, resc

    def gauss_seidel_bb(self,omega, u, res):
        
        n = len(res)
        delu = np.zeros(n)
        resc = res.copy()

        # delu[n -1] = omega * res[n -1] / self.Aij(n-1 , n-1)
        delu[n - 1] = omega * res[n - 1] / self.data[self.ptr[n] - 1]


        for i in range(n-2 , -1, -1):
            upper_sum = self.InnerProductUpperRows(delu, i)
            resc[i] -= upper_sum
            delu[i] += omega * resc[i] / self.Aij(i, i)

        resc = res - self.dot(delu)
        return u + delu, resc
    def SSOR(self, omega, u, res):
        delu, res = self.gauss_seidel(omega,u, res)
        delu2, res2 = self.gauss_seidel_bb(omega,delu, res)
        return delu2, res2

    def iterative_SSOR(self, solini, omega):
        print("ITERATIVE SSOR METHOD")
        sol = solini
        res = self.b - self.dot(sol)
        resnorm = [np.linalg.norm(res)]

        for i in range(self.num_iter):
            sol, res = self.SSOR(omega, sol, res)
            resnorm.append(np.linalg.norm(res))

        return sol, resnorm

    def iterative_conjugate_gradient_PCG(self, solini, method):
        print("ITERATIVE CONJUGATE GRADIENT PCG METHOD WITH", method.__name__)
        sol = solini
        zero = np.zeros(len(sol))
        sol = zero
        res = self.b - self.dot(sol)
        z, _ = method(1, zero, res)
        zk = z
        p = z
        resk = res
        resnorm = [np.linalg.norm(res)]
        print("iteraciones",self.num_iter)
        for i in range(self.num_iter):
            print("iteracion",i, "norma residual",np.linalg.norm(res))
            Ap= self.dot(p)
            alpha = np.dot(res.T, z) / np.dot(p.T, self.dot(p))
            sol = sol + alpha * p
            res = resk - alpha * Ap
            z, _ = method(1, zero, res)
            beta = np.dot(res.T, z) / np.dot(resk.T, zk)
            zk = z
            p = z + beta * p
            resk = res
            resnorm.append(np.linalg.norm(res))

        return sol, resnorm
    def Aij(self, i, j):
        # if any ([i,j] == coords for coords in self.coords):
        #     print("HOLA1")

        #     return self.data[j]
        # print("HOL2")
        for k in range(self.ptr[i], self.ptr[i+1]):
            if self.col[k] == j:
                return self.data[k]
        
        return 0.0

    # def dot(self, vector):
    #     if len(vector) != len(self.ptr)-1:
    #         raise ValueError("Incompatible dimensions for matrix-vector multiplication")

    #     result = [0] * (len(self.ptr)-1)
    #     for i in range(len(self.ptr) - 1):
    #         start = self.ptr[i]
    #         end = self.ptr[i + 1]
    #         for j in range(start, end):
    #             result[i] += self.data[j] * vector[self.col[j]]
    #             # Use coords array to access the column index
    #             col_index = self.coords[self.col[j]][1]
    #             result[i] += self.data[j] * vector[col_index]
    #     return result
    # def dot(self, vector):
    #     result = [0] * len(coords)
    #     for i in range(len(ptr) - 1):
    #         for j in range(ptr[i], ptr[i+1]):
    #             result[i] += data[j] * vector[coords[col[j]]]
    #     return result
    def dot(self, vector):
        result = np.zeros(len(vector))
        i=0
        # print("HOLA V")
        for coord in self.coords:
            # print(len(self.coords))
            # print(len(coord))
            [row,col]=coord
            # print(col)
            result[row] += self.data[i] * vector[col]
            i+=1
        return result
        # prod = np.zeros(len(vector))
        # for i in range(len(self.ptr) - 1):
        #     sum = 0.0
        #     for k in range(self.ptr[i], self.ptr[i+1]):
        #         sum += self.data[k] * vector[self.col[k]]

        #     prod[i] = sum

        # return prod
    
    def InnerProductLowerRows(self, vector, row):
        """
        Multiply the lower part of the sparse matrix by a vector.
        """
        # nelem = self.ptr[row + 1] - self.ptr[row]
        # ntotal = self.ptr[row]

        # sum = 0
        # for j in range(ntotal, ntotal + nelem):
        #     if self.col[j] >= row:
        #         continue

        #     sum += self.data[j] * vector[self.col[j]]

        # return sum
        sum = 0
        for i, (r, c) in enumerate(self.coords):
            if r == row and c < row:
                sum += self.data[i] * vector[c]
        return sum

    def InnerProductUpperRows(self, vector, row):
        """
        Multiply the upper part of the sparse matrix by a vector.
        """
        # nelem = self.ptr[row + 1] - self.ptr[row]
        # ntotal = self.ptr[row]

        # sum = 0
        # for j in range(ntotal, ntotal + nelem):
        #     if self.col[j] <= row:
        #         continue

        #     sum += self.data[j] * vector[self.col[j]]

        # return sum
        sum = 0
        for i, (r, c) in enumerate(self.coords):
            if r == row and c > row:
                sum += self.data[i] * vector[c]
        return sum

    # def dot(self, vector):
    #     print("HOLA C")
    #     prod = np.zeros(len(self.ptr) - 1)
    #     for i in range(len(self.ptr) - 1):
    #         sum = 0.0
    #         for k in range(self.ptr[i], self.ptr[i+1]):
    #             sum += self.data[k] * vector[self.col[k]]

    #         prod[i] = sum

    #     return prod
        
    def get_diag_matrix(self):
        DiagMatrix = np.zeros(len(self.ptr)-1)
        indexDiagMatrix = 0
        for i in range(len(self.coords)):
            if self.coords[i][0] == self.coords[i][1]:
                DiagMatrix[indexDiagMatrix] = self.data[i]
                indexDiagMatrix += 1
        return DiagMatrix
class CSRMatrix:
    def __init__(self, file_path, a):
        self.file_path = file_path
        self.a = a
        self.data = []
        self.col = []
        self.ptr = []
        self.coord = []
        self.row = []

    def processall_lines(self):
        with open(self.file_path, 'r') as file:
            lines = file.readlines()
        
        self.data = []
        self.col = []
        self.ptr = []
        col = 0
        current_ptr = 0
        linha=0
        col=[]
        row=[]
        rowindex=0
        nterms=0
        fake=0
        for line in lines[self.a:]:
            line = line.replace('{', '')
            line = line.replace('}', '')
            elements = [float(element) for element in line.split(',') if element.strip()]
            for element in elements:
                nterms+=1
                fake+=1
                if nterms==2366:
                    # print("hoola2")
                    ok=0
                res=nterms%2368
                division=int(nterms//2368)
                if res==0:
                    res=2368
                    division-=1
                    self.ptr.append(len(self.data))
                # print("res:",res)
                # print("division:",division)
                # print("nterms",nterms)
                if element != 0.0:
                        # division+=1
                    self.data.append(element)
                    self.col.append(res-1)
                    self.row.append(division)
                    
        self.ptr.insert(0,0)
        self.ptr[-1]+=1
        # print("SUMA DE ELEMENTOS",sum(self.ptr))


               
                # linha+=1
        # self.ptr.append(len(self.data))

        # self.ptr[0]=0
        # self.ptr[1]-=1
        # # self.ptr[-1]+=1
        # print("len data:",len(self.data))
        # print("len col:",len(self.col))
        # print("len ptr:",len(self.ptr))
        # print("TERMINOS ",nterms)
        # print("Primeros 10 terminos ")
        # print(self.data[:20])
        # print(self.col[:20])
        # print( self.ptr[:20])
        # print("Ultimos 10 terminos ")
        # print(self.data[-20:])
        # print(self.col[-20:])
        # print( self.ptr[-20:])
        # # self.ptr.append(len(self.data)+1)
        # nnzrow = np.diff(self.ptr)
        # print("nnzrow:",nnzrow)
        # print(len(nnzrow))
        # print(nnzrow[:10])
        # print("suma",sum(nnzrow))
        # coords = []
        # rows = np.repeat(np.arange(len(self.ptr)-1), np.diff(self.ptr))
        # print(rows[:17])
        # print(len(rows))
        #######             ########
        #####COMPROBACIONES ########
        #####               ########
        ########            ########
        # print("len data:",len(self.data))
        # print("len col:",len(self.col))
        # print("len ptr:",len(self.ptr))
        coords=[]
        for i in range(len(self.col)):
            coords.append([self.row[i], self.col[i]])
        
        self.coord = coords
        # print("ultimo valor",coords[-1])
        # print("primer valor",coords[0])
    
    def get_data(self):
        return self.data

    def get_col(self):
        return self.col

    def get_ptr(self):
        return self.ptr

    def get_coord(self):
        return self.coord
    
    # def dot(self, vector):
    #     if len(vector) != len(self.matrix[0]):
    #         raise ValueError("Dimensiones incompatibles para multiplicacion matriz-vector")

    #     result = [0] * len(self.matrix)
    #     for i in range(len(self.matrix)):
    #         start = self.ptr[i]
    #         end = self.ptr[i + 1]
    #         for j in range(start, end):
    #             result[i] += self.data[j] * vector[self.col[j]]
    #     return result
    def dot(self, vector):
        result = np.zeros(len(vector))
        i=0
        for coord in self.coords:
            [row,col]=coord
            result[row-1] += self.data[i] * vector[col]
            i+=1
        return result
    


# Usage example
matrix = CSRMatrix('/Users/victorvillegassalabarria/Downloads/matrix.txt', 1)
# matrix = CSRMatrix('/Users/victorvillegassalabarria/Downloads/matriztest.txt', 0)

matrix.processall_lines()

#2368x2368
def processall_linesvec(file_path, a):
        with open(file_path, 'r') as file:
            lines = file.readlines()
        b = len(lines)
        vec=[]
        for i in range(a, b):
            lines[i] = lines[i].replace('{', '')
            lines[i] = lines[i].replace('\n', '')
            lines[i] = lines[i].replace('}', '')
            a = lines[i].split(',')

            for element in a:
                if element != ' ':
                    if element != '':
                        element = float(element)
                        vec.append(element)
        return vec

file_path='/Users/victorvillegassalabarria/Downloads/rhs.txt'
a=1
import sys 
# sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))

def processall_linesvec(file_path):
    with open(file_path, "r") as f:
        vector = np.array([float(x) for x in f.read().split(",")])      
    
    return vector

listvec=processall_linesvec(file_path)
print("len vectores: ",len(listvec))
b=np.array(listvec,dtype='float64')
num_iter = 1000
tol = 1e-15
data = list(matrix.get_data())
# print(len(data))
col = np.array(matrix.get_col())
# print(col)
# print(len(col))
ptr = np.array(matrix.get_ptr())
# print(len(ptr))
coordenadas = list(matrix.get_coord())
DiagMatrix = np.zeros(len(ptr)-1)
indexDiagMatrix=0
lendiag=0
for i in range(len(coordenadas)):
    if coordenadas[i][0]==coordenadas[i][1]:
        if coordenadas[i][0]<=100:
            print([data[i],coordenadas[i]])
        DiagMatrix[indexDiagMatrix]=data[i]
        lendiag+=1
        indexDiagMatrix+=1


#####
#####MATRIZ PEQUENA 25X25
#####
# matrix = np.array([
#     [1., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 1., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 4, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, -1, 4, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, -1, 4, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 1., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 4, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 4, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 4, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1., 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 4, -1, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 4, -1, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 4, 0, 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1., 0, 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1., 0, 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1., 0, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1., 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1., 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.]
# ])

# print("len matrix:",len(matrix))
# b = np.array([0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0])
# print("len b",len(b))
# data = matrix.flatten()[matrix.flatten() != 0].tolist()
# print("data:",data)
# row, col = np.nonzero(matrix)
# print("row:",row)
# print("col:",col)
# ptr = np.cumsum(np.bincount(row, minlength=len(matrix)+1))
# ptr = np.insert(ptr, 0, 0)
# ptr = ptr[:-1]
# print("ptr:",ptr)
# print(len(ptr))
# nnzr=[]
# for i in range(len(ptr)-1):
#     nnzr.append(ptr[i+1]-ptr[i])
# print("nnzr:",nnzr)
# print("len nnzr:",len(nnzr))
# print("suma",sum(nnzr))
# print("len data:",len(data))
# coordenadas = []
# for i in range(len(row)):
#     coordenadas.append([row[i], col[i]])
# print("len coordenadas:",len(coordenadas))
# num_iter = 15
# tol=1e-15

#####
#####
#####



solver = SolveLinearEquationsPCG(data, col, ptr, coordenadas, b, num_iter, tol)
# jacsol=solver.iterate_jacobi(np.zeros(len(b)))
jacsol=solver.pcg(np.zeros(len(b)))
cc=list(jacsol[1])

# # jacsol=solver.iterative_SSOR(np.zeros(len(b)), 1)
# jacsol=solver.iterative_conjugate_gradient_PCG(np.zeros(len(b)), solver.jacobi)
# cgj=list(jacsol[1])
# jacsol=solver.iterative_conjugate_gradient_PCG(np.zeros(len(b)), solver.SSOR)
# cgssor=list(jacsol[1])

# print(jacsol[0])
# print(jacsol[1])
# plt.plot(jacsol[1])
# plt.plot(range(1, 501), jacsol[1])
# plt.xlabel('Number of Iterations')
# plt.ylabel('Residual Norm')
# plt.title('Convergence of Jacobi Method')
# plt.show()
import matplotlib.pyplot as plt

# cgj=[25.0, 19.967785678537766, 17.071254794865766, 20.80450335705541, 28.774680025806035, 43.47170327833246, 48.2679770645293, 53.1188753155247, 41.53093135858738, 31.2173910558724, 31.608208189992226, 31.060907823067943, 33.13363331195553, 31.383979348587427, 28.247552431874702, 28.201520764266167, 29.23080180973778, 31.499083776287844, 32.92861252014041, 33.26620548293689, 37.54955263371298, 37.68063313961269, 41.806904426381834, 41.62583511296086, 38.33080729833463, 40.55302096196532, 39.09823384446037, 44.563961628257985, 42.726249884579346, 39.95771748113017, 38.87182041327874, 36.660067947628356, 37.972520142577004, 37.12390254553832, 37.279439945140304, 40.1092140507938, 36.26193860547918, 37.420406404450254, 37.42885408475883, 34.808295967264115, 39.34892450791334, 37.61454704457271, 38.89852638960389, 38.95621310660092, 37.70665327659295, 39.552792901037506, 35.642813874468374, 38.27771367945139, 39.33052592346064, 40.29546008111897, 40.217993613235194, 37.47331359360391, 37.00833506956421, 37.258625269590624, 38.66519605475844, 37.81136328315424, 35.966007248337114, 35.9834734450716, 34.53037613704277, 34.14186658527757, 33.2165217404774, 32.884509629939885, 32.93070178958964, 33.767983191909494, 35.00441730631666, 33.93606890879287, 32.74103841957321, 32.94289939996907, 34.50846492543425, 35.06325890017105, 35.71946797594305, 34.36119653403516, 36.547722965306654, 37.14324731986176, 38.0976656407096, 38.027533407097216, 38.22248065191654, 40.53914081937801, 37.22603337318771, 37.80265600827674, 35.10855709951803, 37.96866788574273, 37.889638522511056, 37.63184746223455, 40.0273137487945, 37.90467659680946, 39.60327241055036, 36.76919495823592, 37.69663426477303, 38.224120731920614, 36.399374139510044, 37.588677000470305, 36.34617658697993, 35.26612128967885, 35.59665419019244, 34.7554000980461, 33.92659409222922, 34.01502388765916, 34.0120307848725, 34.88435964401449, 32.49624025344222, 33.337337070411, 34.47775622583284, 34.866881043255276, 34.30052096427043, 33.926607774893256, 33.74626146297137, 32.06617339183192, 33.744309233666726, 33.165505764025255, 33.59147753100116, 32.97698597445251, 33.89151571687842, 34.421034152138276, 33.14739346066899, 33.435065217912005, 32.843116623013515, 33.79659211876206, 33.815018886125806, 33.823376940942595, 33.05870446221058, 34.05947386557092, 35.62886196565415, 33.961760239255625, 35.949735476716185, 37.374037647858295, 36.650413385579355, 37.66238557861276, 37.274261130679484, 38.18605475358083, 36.93426103165735, 37.92723700586609, 40.38219410855598, 39.15453143645733, 37.05050781458472, 39.7002404012926, 41.28986695034847, 40.60804382628095, 38.74487082115437, 41.34171618846232, 40.46976491186736, 40.319418996268915, 41.14175537167359, 42.50117816295619, 43.16450676229209, 41.175825613876285, 45.67639112710678, 45.99799727652998, 42.995530029868895, 42.26293848296463, 46.3644540064242, 48.6673202462571, 44.93898394416371, 44.4910268106538, 47.76866078157018, 46.35121443034382, 42.53450450214436, 43.6807611441464, 46.953757212729585, 43.54635082351749, 39.87166523264912, 41.94868704333284, 43.24331795391057, 40.10936913606784, 40.95858132795335, 46.30649665738859, 46.995712426899246, 40.50408454532051, 41.92584722702357, 46.07908499636009, 47.598136537116574, 44.34900336216062, 48.66075848036566, 49.964652598593375, 44.74850159519139, 44.30042211727395, 48.97099012116806, 50.97862359698265, 45.9137794813813, 46.42757009664089, 49.769589928908275, 46.6731449324767, 43.07414224958798, 49.07668511072181, 56.83318746198156, 52.36505094823315, 47.4190082070932, 52.95176637578056, 57.082518948205205, 53.31306354727632, 49.946319785714316, 56.17442074877035, 53.53747788287399, 44.53980030521527, 45.00898377659658, 52.9523598856107, 53.77069208547241, 52.58009519873842, 52.38941228004003, 58.833874093519846, 53.90271106535871, 54.611439406661454, 57.023528196879504, 64.22860961921683, 59.934100962124866, 59.2757155154567, 59.145213078616315, 61.46323151956906, 54.410584516837666, 56.98988011441352, 52.96666861790727, 50.435837974939375, 43.672962654080806, 48.79050980013255, 49.637334938843644, 50.484436905849805, 46.476498781622524, 51.667555522171575, 49.35682562583402, 47.902245892888644, 41.96974863907017, 48.59260693596098, 46.304384702204345, 45.76313513363163, 45.567060032100024, 48.355532163929055, 42.42778622811318, 43.52084522812571, 44.693855811214966, 46.6116338180127, 41.66513772417859, 42.30107549430128, 42.76652091595225, 41.14694053910777, 36.15097472588694, 38.65117774135457, 37.85481334297396, 36.45689336308488, 32.95168245789415, 34.97626981272113, 34.2371525624473, 31.258816824629463, 29.76532800859469, 30.583661763191333, 28.42955360285155, 25.149028405111775, 26.2985528579002, 26.529793623686604, 23.8274650850195, 21.658564721563554, 24.716905974963126, 23.744642686635494, 22.596924981241578, 20.957142209422216, 23.439374010225592, 21.586684783847854, 20.74850328931955, 21.227244737106254, 23.546227871998994, 22.130755063043804, 20.97243826298929, 21.483910091106395, 22.162161289815952, 19.786450835704343, 19.128245704271144, 19.221926225121788, 19.532148221589, 17.702314528600585, 19.153002272672502, 19.185430098171608, 19.710839366764088, 17.750910361320607, 19.475268361549524, 19.295200792085044, 20.1092809549495, 19.21829279450765, 21.3188328839627, 20.86178735590047, 20.702428465448314, 19.05233948362496, 21.397774602097538, 20.296603165409042, 20.216382361687835, 20.150577504928258, 22.987971605656114, 21.923753749876987, 21.762188605824864, 21.39923502754708, 22.741685421354234, 21.8157225171393, 21.74354662798764, 21.229104248098082, 22.306126751867623, 21.865441692002857, 22.73797042764743, 23.30833984803058, 23.47674847483749, 22.894547994697756, 23.87221491189622, 24.05792021050331, 23.952200025995108, 24.005736794720114, 22.52407871224897, 22.644990585966283, 21.630886078140392, 22.701303391374882, 23.94085617992564, 23.23561987519252, 22.37971718936061, 23.235568869188782, 23.05726515209132, 22.732819221373962, 21.547369717751298, 23.2259509138343, 22.260814321373857, 20.802463672990264, 18.205797125456368, 18.77435856423293, 17.47661255091486, 17.032343926998596, 16.295512344711156, 17.496063513514617, 15.550108077897931, 14.355353873043986, 13.981045846652103, 13.8787397747545, 13.021669196160982, 12.363189161661625, 12.603057649256833, 13.50461071392435, 11.88367944265013, 11.54185185230466, 11.027820490640098, 11.142363900085261, 10.11499689059899, 10.040631101065674, 9.692310978915026, 9.128307807155956, 8.21513275089983, 8.37386416900281, 7.281484899922555, 7.0216568685996, 6.3722964512572835, 6.529848834387634, 6.06669422154152, 5.863815700352825, 5.6324310010894125, 5.540168478203202, 4.995694820241744, 4.852360799185815, 4.471322627648022, 4.261805472578427, 3.718006051597831, 3.751850359221677, 3.4645605777724118, 3.412406822925328, 3.195142178864075, 3.0512486113420154, 2.70244483611604, 2.6537347844922587, 2.4082477335964825, 2.5446779741596584, 2.221910433999614, 2.4086245705834766, 2.1714100770858433, 2.2185438309642898, 1.9966725772888918, 2.1619544039415377, 2.0192981858439265, 2.0411744800095555, 1.735748885979773, 2.0554929787232306, 1.9550783853975557, 1.881362810905231, 1.6870748523518804, 1.7338184522233149, 1.8020487484135237, 1.6568641504051362, 1.5568342633626076, 1.5503444231837114, 1.4925187133423474, 1.4446853138311635, 1.4150843363528467, 1.4258333986954221, 1.3815796990361302, 1.099669870639839, 1.1174541182010354, 0.9759695450687462, 0.9025555210636064, 0.7283960768506884, 0.7218055594922389, 0.7190306576774105, 0.6611241232409577, 0.5357566760106063, 0.5771885702006073, 0.5056387973689106, 0.4838620525792264, 0.37988430794644523, 0.39571630415367537, 0.36322369037120283, 0.3211618829772099, 0.2837223604265511, 0.2864838422435987, 0.254185077440065, 0.23974758703942356, 0.21079518022022795, 0.23054564973193062, 0.20566221300101284, 0.19730795589941863, 0.18349286600245673, 0.1873249739226439, 0.15877327493134266, 0.15479230644398245, 0.14359127748854744, 0.15277711824864182, 0.12699273363756458, 0.1279779203542562, 0.11689607404580497, 0.11205850340730311, 0.09552907785768879, 0.09017002397756484, 0.08735362949172334, 0.08231764701298322, 0.07920913974343237, 0.07490194027225384, 0.07290106356930905, 0.06346624611908934, 0.06410738294553325, 0.06092974312068277, 0.062181629921475176, 0.05379213408358072, 0.058386876158258806, 0.04980075520415876, 0.05052900932170992, 0.042605105140837145, 0.045033747358923945, 0.04232190397424968, 0.041200646389131346, 0.03683394681896259, 0.041036262859957526, 0.034749645911385234, 0.034504552991915426, 0.029890285946725857, 0.03164148421655911, 0.026841046450801587, 0.026047846349700185, 0.024408535678946047, 0.023923289301327512, 0.021263363380373122, 0.020533666024984173, 0.01896465950582318, 0.01842526595436796, 0.01603351406862085, 0.01551941133430635, 0.016095361548562497, 0.014206960776292002, 0.01426731726037973, 0.013071188217656472, 0.01361123911917097, 0.011461492529585867, 0.010749221512292477, 0.010141864965526373, 0.010228249690501423, 0.00883618162666291, 0.00940243893530791, 0.008025057793344366, 0.008297407267827161, 0.006863673575512231, 0.006807800468544959, 0.006242998505670502, 0.006021559718962777, 0.005147908279416511, 0.005649333485452429, 0.004890183310428984, 0.004860127527082217, 0.004331731419620053, 0.004459699561953401, 0.004063353930043416, 0.003617052308878929, 0.0034538264578217724, 0.00322415552320422, 0.003066889201215824, 0.0029915874443642867, 0.00309419902535923, 0.0028714931115886968, 0.0026789139842479676, 0.002453102486482343, 0.0025664010248311647, 0.002102961434514214, 0.0021333961842622917, 0.001914628908220882, 0.0021163267060991912, 0.0016335751174009114, 0.0016913224943708506, 0.001431285820781541, 0.0015429868579467116, 0.0010715105037108078, 0.0012025695495666302, 0.0010090892269849887, 0.0010574538644514758, 0.0008392366120313324]
# cc=[25.0, 20.49647219774568, 19.015600189103115, 19.02993250843744, 24.23098857050674, 44.15687323507003, 54.5023515465279, 55.72138746698079, 56.090547395160215, 41.90571053127838, 33.76351642057368, 28.645338698139255, 25.779647189459496, 21.897694257854535, 23.779907203500656, 26.836432028292823, 28.828676784231764, 40.69438360721823, 40.561395406659315, 41.84377218593036, 45.69334577701805, 37.402904857271785, 40.86479152731482, 40.50608053304253, 39.63030111439796, 36.625374755851844, 35.57995092049303, 38.44520902148412, 37.58492564471975, 44.535883082603874, 37.17534838185764, 34.11750174206939, 31.913129835944442, 34.33126317011949, 38.86315208095431, 39.92853614352775, 7349.660668441097, 60226.46479377986, 112361.9286825367, 37.52119260250627, 134989.13752371742, 46.41251934645281, 51.00699022194073, 278.12214258157985, 2880.156772100297, 34.18619971847838, 89629.51254988703, 4378.987357888595, 68.32749536285134, 41.625380212939454, 182.01610064333676, 39.96339137781917, 912.0131912280556, 28594.84597856268, 38.65151215171182, 12104.870719843264, 51711.19155583898, 48.73541587103323, 57.721644773958815, 46281.47589434976, 6656.98780166467, 37.57803000677974, 32906.72685430349, 3677.409389602688, 39.87964465937094, 143.34038516427378, 155.17099096070226, 39.80344616026596, 5540.343015793184, 117810.56500355812, 39.800654503185626, 500.90782496160296, 555.3072711290013, 119.06929392074613, 39.240897932928576, 39611.44852004666, 38.59000448705012, 8669.62917116126, 42001.63674808119, 12792.568373802891, 37.80213723441128, 2042.0733364714417, 197.195504708061, 39.62955042473472, 4022.87113541575, 37.060683718739995, 1323.2134676431688, 2341.8758966866676, 575.1835824225305, 39.65324716333578, 96835.76136473195, 58133.25121795497, 39.24126843989065, 90552.29711021177, 2105.4623161078716, 41.87353402476815, 194.69053203806075, 69.4715556161627, 49.73347401804803, 493.18862745851294, 30403.641448036054, 41.345964476165626, 1697.660719964667, 2352.97072450044, 42.15918514628883, 2064.1047399865984, 184834.08291053167, 40.10952327562447, 105268.11411249114, 54057.19231007817, 13187.870549689284, 41.291194075415284, 529.6296475495394, 308.91819158147064, 43.92399889303383, 463.8518192027663, 42.039209883237554, 405.51981931193654, 18034.632426215405, 82.2489612778382, 47.101553132838504, 38435.458698647104, 1051.4604101427708, 43.56057508878236, 92616.27865160904, 15404.795596566302, 45.53590751738127, 8468.94032594258, 64.52303007507213, 89.9410010608855, 8490.312833823815, 1281.5327493220561, 44.39485677011859, 3113.9815210867646, 221.67453681725118, 40.64789343511547, 339.1668045571395, 100824.7473517303, 39.61341663647309, 149594.59443378396, 81736.82449943612, 28909.959556435242, 44.1917859892759, 195.00397380691962, 46.44059787433307, 476.6001894205795, 2339.9768271288954, 46.5602203866455, 976.407295797029, 12440.353221226787, 313.2689662014093, 49.60615785641368, 115668.7402689408, 50.041065652491326, 112.31733592258108, 162216.4630850216, 15313.239577625936, 45.680618181307395, 35458.1166081731, 247.85762719336083, 47.30664428358215, 825.4466003026171, 618.4238824481997, 42.91351271462173, 266.343812295191, 2913.605575606562, 41.95641978934295, 17500.039873036967, 30273.274093425694, 39.922987614243944, 24292.923789955483, 177235.7387469748, 1887.137637706165, 40.91316028503926, 3225.326741630111, 47.709460862505786, 88.33643172124177, 8334.41031877655, 54.360287212791654, 79.32545703825619, 27764.88495143973, 890.8610920165343, 41.52587096255519, 23935.000694001457, 43.14863232757594, 187.9346764477571, 91395.53073467615, 177868.71090651196, 42.47935898428424, 62806.95646704827, 8441.2044490487, 44.437777509006516, 612.732920836239, 132.12325053754577, 55.2221714044252, 80.43178603890789, 4598.779213394538, 43.33812623554667, 2260.3527510387357, 129068.49589630641, 42.909301314566434, 36278.526511516946, 173934.2105587148, 943.2930315355725, 42.789788310914425, 16856.796452213362, 49.547198349512605, 82.92844091389988, 1511.84078937313, 680.3310731261482, 45.17132325586652, 45231.559418434605, 9401.034713152216, 60.55037036480439, 68.04094209872933, 45.0461453274817, 680.4279224179733, 3465.199990518439, 35175.51169675355, 42.94682358924481, 214971.79314665936, 10768.177832303514, 51.85843937936761, 72.66661783113086, 100.74994267680931, 70.57694562067131, 63.724804520430254, 22320.60736882569, 44.308283908631566, 1190.4002861758363, 40551.156463910585, 41.48808706985691, 3883.0885330416913, 17117.463506712556, 384.9991550377116, 46.462148043123555, 222134.22562654575, 64.01650462607644, 85.71562458216745, 35698.66980964176, 4771.170747583257, 53.63923174388506, 25624.077978247562, 221.7166224206472, 98.72483051971466, 55.00114431506388, 45.49352309809506, 1295.28297620967, 5639.950605005455, 37258.47175701903, 43.49891730838517, 159869.56357770952, 39813.09690031208, 103.58343332214136, 53.91409174394844, 15878.937314051562, 64.40609558902253, 70.09162592712302, 129394.70007951798, 339.3210582115904, 45.65640072208739, 142475.54706995634, 49.055908349546364, 587.130942149912, 14102.860798422686, 97.04614080664588, 61.68256426181847, 191783.63482059122, 151.1175929930049, 58.19776729045124, 73329.43117960445, 11861.943227840808, 49.41947035773311, 76244.1394085547, 233.04981255235572, 106.6605295839196, 48.54431046796351, 45.447496236322635, 245.28969375697528, 7705.2273213025865, 64865.624402190784, 46.548638352546114, 19692.453191124645, 645.5749579564628, 89.64572826334769, 52.457263825817556, 96808.97322494538, 42.93962611638943, 11790.73627562462, 114834.30645321033, 1334.032812377684, 46.18458362221645, 29272.352868287882, 58.060640498157355, 83.80121803922643, 1288.567594498508, 60.89237256234917, 80.26219963720241, 9670.424926632522, 2781.0725957517902, 50.832470094185695, 150681.87966809055, 164744.83014469818, 48.458649849779356, 78159.49853510135, 22371.25557596375, 79.42204386724778, 65.49304362870484, 360.1615113790475, 51.24014879243279, 592.3749947194217, 86112.87059218394, 48.26974505928602, 2093.634839193337, 1818.6862935665442, 324.15363330564185, 49.72752174021736, 211242.91255328094, 48.20193757359567, 1639.6103875427718, 121270.21137685094, 12519.627150949771, 47.574606834777434, 7236.874019229934, 251.57501891371786, 47.69902672667318, 848.2088097435119, 47.223660371316186, 953.3914466709788, 2686.2402288634044, 2285.0078840796446, 43.55418834870876, 225449.29424478312, 22075.372939537978, 40.774397923550495, 45489.74415455791, 6386.405530183015, 43.75770125387127, 111.01084665744361, 149.00156220724762, 43.920378791805334, 142.70240660169003, 40654.14612214498, 43.601214742791775, 133.18783776742987, 10890.033617239125, 1303.5956279120303, 40.04012904085142, 4862.039647101965, 43.16033657425108, 5749.62486393661, 35381.19555186409, 165885.85282344988, 45.14161504434962, 4937.273178094011, 1648.7836037990203, 43.539289369098356, 165.30749863455353, 69.56700844661032, 61.863486167937424, 2198.70754909311, 13933.454643047835, 44.87742935227645, 5961.999460190995, 45652.530450416976, 45.14392690331242, 5377.641669519981, 82924.48458606961, 53.60430063981696, 179.00222103734546, 40864.44666249955, 118.16518945943811, 64.2931381678484, 64326.12835212018, 53.42633381550694, 113.3838484549609, 66376.64768364506, 76.13393495850531, 55.46835956367153, 5999.047736038426, 43.05632726233498, 3045.793534151009, 79435.14407766481, 136416.53331730215, 40.417118130650046, 6393.146171019444, 3479.8380127696496, 128.30742923184656, 39.85201619070421, 342.49624398569443, 37.90385162686471, 2238.815714818393, 70462.81348959687, 37.69159228395981, 183.7535447739968, 10799.027977566162, 39.538555330033326, 806.7338397364839, 10328.794068443642, 44.11258122827048, 2548.724529096297, 166719.75193617019, 1224.6396974931467, 49.51306115645125, 26677.166152194106, 276.71668595300685, 48.49159011167842, 109122.80908836356, 47.74636440385021, 190.4109914218408, 405.0777517920388, 43.794373586597274, 1777.1924734024274, 10964.317332881566, 74655.67574353589, 43.119626125776264, 115019.01887574741, 755.9209765542914, 86.79943355925465, 49.68223878384848, 970.9859956112617, 42.403479261958026, 27635.12164156442, 154398.54794595152, 49.9585118941127, 95.18826556735563, 1175.753355407063, 46.657053076801546, 678.1212598909998, 6534.656664612662, 46.028194566261384, 750.0433373352971, 207758.67495170585, 1716.0797598943843, 44.248194950433515, 32098.397468730367, 2103.2645431870305, 42.33005770543563, 57864.352209095654, 1214.7958677255187, 38.92594328139976, 973.6313768305943, 63.79409206087272, 62.23653741125894, 155.52985263081942, 12457.070971641802, 45.02462394066113, 40936.52597822834, 23985.097303656337, 47.63460606714831, 129.69610870542863, 8817.623371420768, 44.07014038707852, 8752.482882222563, 50483.077551863644, 586.4416574714694, 41.04878008518059, 2702.130517048676, 50.69460597380728, 87.1625938610466, 1892.1461025510662, 49.18317482425598, 3863.359549693077, 68804.26598886529, 12130.635995792609, 48.21309395388883, 17339.041655359804, 1040.188613283932, 43.05366309774219, 5967.2926197267825, 410.2907832921062, 43.7652624498521, 3459.8566607526045, 308.15121034209045, 48.798853722982294, 126.37472700311955, 71783.67097728931, 46.413474102942956, 1892.1787056653275, 71410.37466009129, 110.38901422200321, 53.685242985248316, 201765.59839937172, 46.57435142896989, 3303.240211911486, 136298.69873057064, 22792.39259017918, 44.39847704486387, 1265.6433972869881, 211.5508074086491, 88.64359257656149, 58.2928350199252, 45.22637721216954, 2440.4132117322133, 64051.199393294155, 152599.43664923665, 45.561353098479294, 97698.8446581664, 3195.453117387736, 51.24204664357618, 540.4497229401105]
# cgssor=[25.0, 24.46727767548784, 32.31779827599975, 43.754215373085046, 34.23779471928226, 28.323149418833694, 25.553809888353495, 29.3905467386888, 30.531612741480764, 36.60982690567503, 41.02295625180476, 36.297428578516154, 33.99704641581953, 32.25172356548481, 34.39085668889321, 34.81141628450943, 37.400500386194295, 35.044095295982736, 38.00513328130156, 35.99563313452811, 37.61700735821734, 36.40101872412042, 34.73271570310647, 37.70680230460393, 32.74265583868903, 33.85100099084752, 33.27075672479627, 33.369591650239066, 32.251603517265536, 34.57032011993369, 32.65363279681422, 35.45294144136841, 35.36946202051463, 35.92158162831305, 36.14539700918646, 33.38579364529185, 36.21858407560942, 34.99124616549747, 35.33458003949448, 34.770683995224275, 36.90207104278813, 36.522777933164754, 34.73494264842539, 34.98575253551812, 34.53833233424476, 35.0878565950905, 34.63081874200797, 34.64135828194308, 35.4187520635133, 35.552472419816986, 34.12260696131505, 32.47333822210111, 37.26245475070322, 37.01243865474396, 34.47506432232459, 34.325088617629675, 34.60108038553866, 32.70405298686368, 34.9265068031274, 37.100235448054704, 38.655942727731976, 38.995397173606, 40.24722908164592, 41.71515632298284, 38.998852477449276, 37.79561379193226, 40.95924697556921, 41.14505172468636, 40.48315955233706, 39.65045117225626, 42.17366142299409, 39.18551869764017, 39.90808682355001, 41.03052093041638, 43.736897762120755, 42.431512952349394, 41.7223254213311, 42.489936334309625, 41.135683947798476, 41.59392615339269, 40.448826561688925, 39.39015408157675, 44.024001319342084, 47.10938402029547, 46.19776844493997, 51.63137692111641, 50.560229030083136, 50.58195581429432, 50.58168006584526, 52.914588465844446, 55.580929403735205, 54.917695691579944, 52.59175349222852, 48.06908715340043, 49.01432061408554, 47.91438248352763, 44.28968504553062, 45.89727099386934, 46.029018526370685, 44.298217044809185, 45.39463904597669, 45.021017154973684, 42.04254709756628, 38.291272099218965, 34.923934343260676, 33.0784972555988, 29.67684074855939, 27.939609663936825, 23.93104879377075, 23.33636338277586, 21.515690989435043, 20.25328477387529, 20.019726784661646, 20.675477209692797, 18.845931186102778, 19.468107120702413, 18.952152457770712, 18.562657176914584, 19.159015908721788, 17.077416933324763, 16.826933440363497, 17.827293037880338, 17.048665798200304, 18.140177353299766, 20.152433763418962, 21.796617619370984, 22.17228367433306, 24.337152900515875, 23.25863969314341, 20.517964573963752, 21.087617250556175, 19.648669462391606, 19.81373548040583, 21.535648759016464, 20.734630332251022, 18.805520880656967, 21.345857684305436, 20.143175667810038, 17.648634836167425, 16.274930795020854, 14.95967289210327, 14.583491193798064, 13.834653644324161, 12.010513689624588, 11.143976051704241, 10.66844444908398, 9.717190072049496, 8.421904384010546, 7.5793935532331815, 6.181235867690341, 5.220767665688075, 4.959252225250193, 4.380662059559509, 3.7522723412536645, 3.806715163285446, 3.4365382975057486, 3.006727995215765, 3.1103059563662896, 2.832742686257387, 2.515673020930836, 2.7239241750628804, 2.4674977207020707, 2.1009433356954728, 2.1326617164817203, 1.7830127572231507, 1.4075432876867446, 1.4412575815310495, 1.215909719774799, 0.9622874201444617, 0.9998938687068079, 0.9345156757566228, 0.8006296997758785, 0.8003246507760791, 0.6319486282982201, 0.5105649697558154, 0.4834970046060065, 0.38741098816501457, 0.3027291639518112, 0.309217362468021, 0.24745944515892987, 0.21795016607985448, 0.22635741904491002, 0.1648877978425189, 0.1420673281583359, 0.1394303812069351, 0.11194210883030331, 0.09622565358146645, 0.09507251761969722, 0.07546785378541282, 0.06210709725688059, 0.0593579568204047, 0.044462068903943726, 0.039179380382820636, 0.03423328303477706, 0.027232037466725336, 0.022435390429649205, 0.019346038778964795, 0.014981644178891546, 0.013231669228652489, 0.011819816352073973, 0.009188633169811807, 0.007771788290667027, 0.007319685585649132, 0.006373204323273091, 0.006027801293103463, 0.005822160172603615, 0.00461671001129787, 0.004252053587652924, 0.004121770261155103, 0.002991674404393699, 0.003084752223942561, 0.0027007064901883528, 0.0019182889397530616, 0.0018074487300103307, 0.001580982557681774, 0.0011492165869654623, 0.0011260525621268553, 0.0010814643978679153, 0.0008053584227359312, 0.0007471734754539906, 0.0007294970035848495, 0.000547294249262929, 0.0005110129687982137, 0.00047478316306881366, 0.00031553949211631925, 0.00031163729740664935, 0.0002872074015901502, 0.00019370543293786513, 0.00019510803259487086, 0.00017375040460749177, 0.00011623248265914568, 0.0001134689012630249, 0.00010597846438622202, 7.538357354350951e-05, 7.80350073711347e-05, 7.362299956973894e-05, 5.274383809738009e-05, 5.41211740807782e-05, 4.707076911137859e-05, 3.2987243296957214e-05, 3.122558714566861e-05, 2.7950509308885347e-05, 1.711364578785696e-05, 1.844678241405352e-05, 1.6772418756072364e-05, 1.1702064991290558e-05, 1.2025804728408245e-05, 9.678729359401974e-06, 6.535724398974577e-06, 7.573299310595952e-06, 6.778761810425798e-06, 4.5351221067529915e-06, 5.112802223325367e-06, 4.732507419267069e-06, 3.3097343463899046e-06, 3.6698893563468305e-06, 3.13879603256053e-06, 2.078948348057497e-06, 2.4234304605857207e-06, 2.4157058323490983e-06, 1.8166026918715901e-06, 2.0209499612234607e-06, 1.821590108259341e-06, 1.1328526277041243e-06, 1.3176044506859456e-06, 1.2454432167040593e-06, 8.588900585214949e-07, 9.68393157389039e-07, 8.529433235538197e-07, 5.427578510505286e-07, 6.310000763566385e-07, 5.548731439343685e-07, 3.508503580124663e-07, 4.075613038590895e-07, 3.411564452579739e-07, 2.2233825858906056e-07, 2.751733836550885e-07, 2.2728744042925035e-07, 1.643140514969911e-07, 1.849757391459014e-07, 1.5599996800830067e-07, 1.0307270216040421e-07, 1.1727007096729351e-07, 9.557597822732748e-08, 6.543663335432132e-08, 6.801352506509516e-08, 4.9991567963886694e-08, 3.520954558685891e-08, 3.893134803232589e-08, 3.047518124069731e-08, 2.0744290135233188e-08, 2.200431640730597e-08, 1.7330822016442317e-08, 1.2516004590591991e-08, 1.2698279602808638e-08, 8.959800056327456e-09, 6.404794434029057e-09, 7.141556304988811e-09, 4.287435219884761e-09, 3.5100455833033984e-09, 3.742586075316402e-09, 2.4870696301048923e-09, 1.9379319876842174e-09, 1.907285774901296e-09, 1.211370774256744e-09, 8.439755017608967e-10, 8.786646444487365e-10, 6.239328784981197e-10, 4.010842511117398e-10, 3.946562884959164e-10, 2.489947212364184e-10, 1.651563291967187e-10, 1.7355536899229766e-10, 1.0593247344594978e-10, 8.217000050833206e-11, 8.122872752009844e-11, 5.04811432679217e-11, 3.92794457489986e-11, 4.0107683990924974e-11, 2.2288211576963155e-11, 1.8898977266063065e-11, 1.7980419198557748e-11, 9.718665508293457e-12, 8.285680215278388e-12, 7.676304813468743e-12, 4.215326392063125e-12, 3.9290297892583515e-12, 4.141970279114136e-12, 2.2712013551451246e-12, 1.9540974503730383e-12, 1.857032810735412e-12, 1.0389330490065733e-12, 8.912356418389985e-13, 7.606764140612494e-13, 4.705239420637168e-13, 4.457796805878706e-13, 4.251648429447667e-13, 2.482128438213728e-13, 2.2925789949937137e-13, 2.1981981515532886e-13, 1.1811291413316412e-13, 1.2491283023253623e-13, 1.2118781395956119e-13, 7.13453464785121e-14, 8.227876073692952e-14, 7.603941987205035e-14, 4.51975010091088e-14, 6.342254648965641e-14, 6.532820000211317e-14, 4.534099709139652e-14, 7.933512532938751e-14, 9.600562719770227e-14, 6.629097020307215e-14, 1.284119985279386e-13, 1.526913106783279e-13, 1.265912413465624e-13, 2.2147999900500185e-13, 2.3206180062824787e-13, 1.9280134068629514e-13, 3.0330140817493803e-13, 2.9524961166774983e-13, 1.8203546195352314e-13, 2.6870368056893446e-13, 2.1133237804871733e-13, 1.235459498863663e-13, 1.5339076814422685e-13, 1.163457023664935e-13, 7.719294012160903e-14, 1.0944674864681218e-13, 9.751820798450568e-14, 7.750040292038676e-14, 1.4318244969908377e-13, 1.4107696460676223e-13, 1.1527214535676895e-13, 2.114361465395889e-13, 1.9982901701247414e-13, 1.5667911526737978e-13, 2.8133096126860027e-13, 2.499494078559981e-13, 1.884606377893955e-13, 3.1633723301305834e-13, 2.5394372549923587e-13, 1.8331848284576002e-13, 2.3957452910110063e-13, 1.331910697188997e-13, 9.886240574327417e-14, 1.3633229157054458e-13, 8.930360783829219e-14, 7.867191782439839e-14, 1.1593576913459414e-13, 1.0283998656846505e-13, 9.047512309043751e-14, 1.7228705880187363e-13, 1.734791064263548e-13, 1.5377107674783256e-13, 3.011515839019322e-13, 3.2597266627749515e-13, 2.698842486632775e-13, 5.387532011609468e-13, 4.19412748080292e-13, 2.966312377477506e-13, 4.4758702402863183e-13, 2.864543916256877e-13, 1.8406895412770031e-13, 2.3796597398962003e-13, 1.2787649544067708e-13, 7.851693279312862e-14, 1.0404354551022039e-13, 6.516038563547697e-14, 4.308605757294077e-14, 6.110158014273015e-14, 4.032927303184604e-14, 3.1278237493645005e-14, 5.755957392978653e-14, 4.440846690030762e-14, 3.91663972730891e-14, 7.350418926489759e-14, 6.215712449053114e-14, 6.21552421248798e-14, 1.1571168628972317e-13, 9.638675306527596e-14, 9.320927169936765e-14, 1.4660908181097178e-13, 1.0317326329170471e-13, 9.041380232594989e-14, 1.1074699026914983e-13, 6.239218826090547e-14, 4.494132859417231e-14, 4.543330255612804e-14, 2.316173355974441e-14, 1.7913668198495297e-14, 2.0281781246405665e-14, 9.186950262876231e-15, 7.355765516774021e-15, 7.253955956836346e-15, 3.5209597025776282e-15, 3.248603148360073e-15, 3.039470471318621e-15, 1.4846466818389253e-15, 1.3606644474679877e-15, 1.3222220333884542e-15, 6.928449449111241e-16, 7.134688962444605e-16, 7.130667562624497e-16, 3.96365338573539e-16, 4.880731681052174e-16, 5.96185520493392e-16, 4.2807707568907447e-16, 6.179253477443007e-16, 6.61300997384984e-16, 4.605291071762905e-16, 6.397822222185974e-16, 6.416172903447471e-16, 3.9981011842209267e-16, 4.73250837484107e-16, 4.0133167026853826e-16, 2.33685149471502e-16, 2.1799780826280438e-16, 1.5617441615952996e-16, 8.293146763137561e-17, 8.70193456038954e-17, 6.146893063971156e-17, 3.067236556831811e-17, 3.8276583541437276e-17, 3.4959626227862774e-17, 2.5894058731043922e-17, 3.829022940761425e-17, 4.101508091864439e-17, 3.326987761467609e-17, 4.7645706150598896e-17, 4.266082336463627e-17, 2.6345740433397823e-17, 3.0532826205830146e-17, 2.2971402177467015e-17, 1.3802514518189362e-17, 1.2866141895149356e-17, 8.417278586270726e-18, 5.12930464085485e-18, 5.226634368582861e-18, 4.313498104569671e-18, 2.691705558235973e-18, 3.284856668111889e-18, 3.0931525200904183e-18, 2.580708566518056e-18, 4.007531339127959e-18, 4.680040453111411e-18, 3.29189467524888e-18, 4.437175541278344e-18, 3.826143063175641e-18, 2.205709905754864e-18, 2.345194887802597e-18, 1.5690138792401796e-18, 8.346579616867664e-19, 8.96348865317694e-19, 5.670266583333887e-19, 2.8702986906980497e-19, 3.255763748741566e-19, 2.1237422047139444e-19, 1.1557154506115965e-19, 1.378153363742991e-19, 8.159040965091383e-20]
# plt.plot()
# x=[i for i in range(0, 501)]
plt.figure()
plt.plot(range(len(cc)), cc,color='sienna')
# plt.plot(range(len(cgj)), cgj,color='black')
# plt.plot(range(len(cgssor)), cgssor ,color='yellow')
plt.xlabel('Number of Iterations')
plt.ylabel('Residual Norm')
plt.xlim(0,num_iter-1)
plt.ylim(min(cc), 10.5e5)
plt.grid(True)
plt.yscale('log')

plt.legend(['GC', 'GCJ', 'GCSSOR'], facecolor='white', edgecolor='black')
plt.title('Convergence of Conjugate Gradient Method')
plt.show()
# plt.title('Convergence of Conjugate Gradient with Jacobi Preconditioner')
plt.show()